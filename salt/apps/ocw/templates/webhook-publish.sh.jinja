#!/usr/bin/env bash

LOG_FILE=/opt/ocw/webhook-publish.log
SOURCE_DATA_BUCKET={{ source_data_bucket }}
SITE_OUTPUT_DIR=/opt/ocw/hugo-course-publisher/dist/  # Should end in '/'
WEBSITE_BUCKET={{ website_bucket }}
FASTLY_API_TOKEN={{ fastly_api_token }}
FASTLY_SERVICE_ID={{ fastly_service_id }}
# lock_dir ensures that only one run of this script happens at once.
lock_dir=/tmp/webhook-publish-lock
# If retry_file is present, the script will run itself again to catch changes
# that came in during the period of the current run.
retry_file=/tmp/webhook-publish-retry

# Configuration for hugo-course-publisher
OCW_TO_HUGO_INPUT=/opt/ocw/open-learning-course-data
OCW_TO_HUGO_DOWNLOAD=1
OCW_TO_HUGO_STRIPS3=1
OCW_TO_HUGO_STATIC_PREFIX=/coursemedia
AWS_BUCKET_NAME={{ source_data_bucket }}

export OCW_TO_HUGO_INPUT OCW_TO_HUGO_DOWNLOAD OCW_TO_HUGO_STRIPS3 \
       OCW_TO_HUGO_STATIC_PREFIX AWS_BUCKET_NAME


log_message() {
    echo `date +'%Y-%m-%d %H:%M:%S'` $1 | tee -a ${LOG_FILE}
}

error_and_exit() {
    log_message $1
    rm -rf $lock_dir
    exit 1
}

mkdir $lock_dir
if [ $? -ne 0 ]; then
    echo "Can not acquire lock. Another run in-progress?" >&2
    touch $retry_file
    exit 1
fi

if [ ! -e $retry_file ]; then
    cat /dev/null > $LOG_FILE || error_and_exit "Can not initialize logfile"
else
    # Do not initialize the logfile if this is a re-run
    log_message "This is a re-run."
    rm $retry_file
fi

log_message "Pulling source data"
aws s3 sync s3://$SOURCE_DATA_BUCKET/ $OCW_TO_HUGO_INPUT/ --delete --only-show-errors
if [ $? -ne 0 ]; then
    error_and_exit "Failed to pull source data"
fi

cd /opt/ocw/hugo-course-publisher \
    || error_and_exit "Can not cd to hugo-course-publisher!"

log_message "Pulling hugo-course-publisher"
git pull || error_and_exit "Can not pull hugo-course-publisher"
yarn install --pure-lockfile \
    || error_and_exit "Can not install hugo-course-publisher"

log_message "Clearing site/content directory"
rm -rf site/content/*
if [ $? -ne 0 ]; then
    error_and_exit "Could not clear site/content directory"
fi

log_message "Clearing node_modules directory"
# just to be safe
rm -rf node_modules
if [ $? -ne 0 ]; then
    error_and_exit "Could not delete node_modules"
fi

log_message "Running ocw-to-hugo via import:ocw NPM target"
npm run import:ocw
if [ $? -ne 0 ]; then
    error_and_exit "Failed to run import:ocw target"
fi

log_message "Running hugo-course-publisher"
npm run build 2>&1 > /opt/ocw/hugo-course-publisher.log
if [ $? -ne 0 ]; then
    error_and_exit "Failed to run hugo-course-publisher. See /opt/ocw/hugo-course-publisher.log"
fi

log_message "Syncing to S3 bucket"
# a little double-check to make sure the source directory ends in a slash, to
# prevent the site from getting copied into a subdirectory ...
echo "$SITE_OUTPUT_DIR" | grep -q '/$'
if [ $? -ne 0 ]; then
    log_message "WARNING: appending '/' to $SITE_OUTPUT_DIR"
    SITE_OUTPUT_DIR=$SITE_OUTPUT_DIR/
fi
aws s3 sync $SITE_OUTPUT_DIR s3://$WEBSITE_BUCKET/ \
    --delete --only-show-errors 2>&1 > /opt/ocw/website-sync.log
if [ $? -ne 0 ]; then
    error_and_exit "Failed to sync to S3 bucket. See /opt/ocw/website-sync.log"
fi

log_message "Clearing Fastly cache"
curl -f -X POST -H "Fastly-Key: $FASTLY_API_TOKEN" \
    https://api.fastly.com/service/$FASTLY_SERVICE_ID/purge_all
if [ $? -ne 0 ]; then
    log_message "WARNING: Failed to clear Fastly cache!"
fi

log_message "Done"

if [ -e $retry_file ]; then
    log_message "$retry_file exists. Removing $lock_dir and re-running ..."
    rmdir $lock_dir
    exec $0
else
    rmdir $lock_dir
fi

exit 0
