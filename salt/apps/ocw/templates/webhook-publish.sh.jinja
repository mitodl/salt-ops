#!/usr/bin/env bash

# Usage
#
# To run a normal publish, running only if code has changed:
#
# cd /opt/ocw
# ./webhook-publish.sh
#
# OR, to publish everything, no matter if any code has changed:
#
# cd /opt/ocw
# ./webhook-publish.sh full


LOG_FILE=/opt/ocw/webhook-publish.log
SOURCE_DATA_BUCKET={{ source_data_bucket }}
SOURCE_DATA_DIR=/opt/ocw/open-learning-course-data
SITE_OUTPUT_DIR=/opt/ocw/ocw-www/dist/  # Should end in '/'
COURSES_MARKDOWN_DIR=/opt/ocw/ocw-to-hugo/private/output
WEBSITE_BUCKET={{ website_bucket }}
OCW_TO_HUGO_BUCKET={{ ocw_to_hugo_bucket }}
FASTLY_API_TOKEN={{ fastly_api_token }}
FASTLY_SERVICE_ID={{ fastly_service_id }}
OCW_TO_HUGO_GIT_REF={{ ocw_to_hugo_git_ref }}
OCW_WWW_GIT_REF={{ ocw_www_git_ref }}
OCW_COURSE_HUGO_STARTER_GIT_REF={{ ocw_course_hugo_starter_git_ref }}
COURSE_BASE_URL={{ course_base_url }}
OCW_STUDIO_BASE_URL={{ ocw_studio_base_url }}
# lock_dir ensures that only one run of this script happens at once.
lock_dir=/tmp/webhook-publish-lock
# If retry_file is present, the script will run itself again to catch changes
# that came in during the period of the current run.
retry_file=/tmp/webhook-publish-retry

# Export those shell variables that must be environment variables for the
# processes we execute
export OCW_STUDIO_BASE_URL

# Optional script argument
script_option=$1

log_message() {
    echo `date +'%Y-%m-%d %H:%M:%S'` $1 | tee -a ${LOG_FILE}
}

error_and_exit() {
    log_message $1
    rm -rf $lock_dir
    exit 1
}

# Do a git fetch and git reset to accomplish a `git pull` without failing if
# there was a change to the git history.
# Return 0 if the working copy was changed, 1 if it was not.
#
git_fetch_and_reset() {
    repo_name=$1
    git_ref=$2
    orig_commit=`git rev-parse HEAD`
    log_message "Pulling $repo_name"
    git fetch && git reset --hard origin/$git_ref \
        || error_and_exit "Can not pull $repo_name"
    new_commit=`git rev-parse HEAD`
    log_message "$orig_commit -> $new_commit"
    if [ "$orig_commit" != "$new_commit" ]; then
        log_message "... Pulled new commit"
        return 0
    else
        log_message "... No new commit"
        return 1
    fi
}

clear_directory() {
    dir=$1
    log_message "Clearing $dir"
    rm -rf $dir
    if [ $? -ne 0 ]; then
        error_and_exit "Could not clear $dir"
    fi
}

# Manage locking directory and retry file

mkdir $lock_dir
if [ $? -ne 0 ]; then
    echo "Can not acquire lock. Another run in-progress?" >&2
    touch $retry_file
    exit 1
fi

if [ -e $retry_file ]; then
    log_message "This is a re-run."
    rm $retry_file
fi


# Pull source data

log_message "Pulling source data"
aws s3 sync s3://$SOURCE_DATA_BUCKET/ $SOURCE_DATA_DIR/ --delete \
    --only-show-errors
if [ $? -ne 0 ]; then
    error_and_exit "Failed to pull source data"
fi


# Pull ocw-www

cd /opt/ocw/ocw-www || error_and_exit "Can not cd to ocw-www"
git_fetch_and_reset ocw-www $OCW_WWW_GIT_REF
ocw_www_changed=$?


# Pull ocw-to-hugo

cd /opt/ocw/ocw-to-hugo || error_and_exit "Can not cd to ocw-to-hugo"
git_fetch_and_reset ocw-to-hugo $OCW_TO_HUGO_GIT_REF
ocw_to_hugo_changed=$?

# Pull ocw-course-hugo-starter

cd /opt/ocw/ocw-course-hugo-starter \
    || error_and_exit "Can not cd to ocw-course-hugo-starter"
git_fetch_and_reset ocw-course-hugo-starter $OCW_COURSE_HUGO_STARTER_GIT_REF
ocw_course_hugo_starter_changed=$?


# Continue if there were changes, or if we want a 'full' run regardless of
# changes.
if [ "$script_option" != "full" ]; then
    if [ $ocw_www_changed -eq 0 ] || [ $ocw_to_hugo_changed -eq 0 ] \
            || [ $ocw_course_hugo_starter_changed -eq 0 ]; then

        log_message "Pulled new commit; continuing with publish."

    else

        log_message "No new commits; stopping."
        rmdir $lock_dir
        exit 0
    fi
fi


# Run ocw-to-hugo

cd /opt/ocw/ocw-to-hugo

clear_directory /opt/ocw/ocw-to-hugo/node_modules

log_message "Doing yarn install of ocw-to-hugo"
yarn install --pure-lockfile > /opt/ocw/ocw-to-hugo-install.log 2>&1 \
    || error_and_exit "Can not install ocw-to-hugo"

log_message "Running ocw-to-hugo"
node . -i $SOURCE_DATA_DIR -o $COURSES_MARKDOWN_DIR \
    --strips3 --staticPrefix /coursemedia > /opt/ocw/ocw-to-hugo.log 2>&1
if [ $? -ne 0 ]; then
    error_and_exit "Failed to run ocw-to-hugo. See /opt/ocw/ocw-to-hugo.log"
fi


# Run ocw-www build

cd /opt/ocw/ocw-www

clear_directory /opt/ocw/ocw-www/node_modules

log_message "Doing yarn install of ocw-www"
yarn install --pure-lockfile > /opt/ocw/ocw-www-yarn-install.log 2>&1 \
    || error_and_exit "Can not install ocw-www"

log_message "Running ocw-www build"
npm run build > /opt/ocw/hugo-www.log 2>&1
if [ $? -ne 0 ]; then
    error_and_exit "Failed to run ocw-www. See /opt/ocw/ocw-www.log"
fi


# Run course builds with ocw-course-hugo-starter

log_message "Running ocw-course-hugo-starter build"
cd /opt/ocw/ocw-course-hugo-starter
./build.sh \
    --output $SITE_OUTPUT_DIR \
    --courses $COURSES_MARKDOWN_DIR \
    --baseUrl $COURSE_BASE_URL \
    > /opt/ocw/course-builds.log 2>&1
if [ $? -ne 0 ]; then
    error_and_exit "Failed to run course builds. See /opt/ocw/course-builds.log"
fi


# Write commit hash files

log_message "Writing commit hash files"

cd /opt/ocw/ocw-www \
&& git rev-parse HEAD > $SITE_OUTPUT_DIR/static/ocw-www-hash.txt \
&& cd /opt/ocw/ocw-to-hugo \
&& git rev-parse HEAD > $SITE_OUTPUT_DIR/static/ocw-to-hugo-hash.txt \
&& cd /opt/ocw/ocw-course-hugo-starter \
&& git rev-parse HEAD > $SITE_OUTPUT_DIR/static/ocw-course-hugo-starter-hash.txt

if [ $? -ne 0 ]; then
    error_and_exit "Failed to write commit hash files"
fi


# Sync HTML to S3 bucket

log_message "Syncing to S3 bucket ($WEBSITE_BUCKET)"
# a little double-check to make sure the source directory ends in a slash, to
# prevent the site from getting copied into a subdirectory ...
echo "$SITE_OUTPUT_DIR" | grep -q '/$'
if [ $? -ne 0 ]; then
    log_message "WARNING: appending '/' to $SITE_OUTPUT_DIR"
    SITE_OUTPUT_DIR=$SITE_OUTPUT_DIR/
fi
aws s3 sync $SITE_OUTPUT_DIR s3://$WEBSITE_BUCKET/ \
    --delete --only-show-errors > /opt/ocw/website-sync.log 2>&1
if [ $? -ne 0 ]; then
    error_and_exit "Failed to sync to S3 bucket. See /opt/ocw/website-sync.log"
fi


# Clear CDN cache

log_message "Clearing Fastly cache"
curl -f -X POST -H "Fastly-Key: $FASTLY_API_TOKEN" \
    https://api.fastly.com/service/$FASTLY_SERVICE_ID/purge_all
if [ $? -ne 0 ]; then
    log_message "WARNING: Failed to clear Fastly cache!"
fi

# Sync ocw-to-hugo output to S3

log_message "Syncing ocw-to-hugo output to S3"
aws s3 sync $COURSES_MARKDOWN_DIR/ s3://$OCW_TO_HUGO_BUCKET/ \
    --delete --only-show-errors > /opt/ocw/ocw-to-hugo-output-sync.log 2>&1
if [ $? -ne 0 ]; then
    error_and_exit "Failed to sync to S3 bucket. See /opt/ocw/ocw-to-hugo-output-sync.log"
fi


log_message "Done"

# Clean up

if [ -e $retry_file ]; then
    log_message "$retry_file exists. Removing $lock_dir and re-running ..."
    rmdir $lock_dir
    exec $0
else
    rmdir $lock_dir
fi

exit 0
